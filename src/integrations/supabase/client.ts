
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://onojviswlkxuyfsksuhp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ub2p2aXN3bGt4dXlmc2tzdWhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQyNDA0ODAsImV4cCI6MjA1OTgxNjQ4MH0.nRHrwoKZsmH95950yWpuezfQKRwc8z4ofM7qmbuyPIw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a single supabase client for interacting with your database
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    }
  }
);

// Function to directly execute raw SQL queries
export const executeSql = async (query: string, params?: any[]) => {
  // Explicitly cast the RPC call to any before making it
  const { data, error } = await (supabase.functions.invoke('execute', {
    body: { query, params }
  }) as any);
  
  if (error) throw error;
  return data;
};

// Function to get a user's mnemonic
export const getUserMnemonic = async (userId: string): Promise<string | null> => {
  if (!userId) {
    console.error('Cannot fetch mnemonic: No user ID provided');
    return null;
  }

  try {
    const { data, error } = await supabase.functions.invoke('get-user-mnemonic', {
      body: { user_id_param: userId }
    });
    
    if (error) {
      console.error('Error fetching mnemonic:', error);
      return null;
    }
    
    if (!data || !data.success) {
      console.error('Failed to fetch mnemonic:', data?.error || 'Unknown error');
      return null;
    }
    
    return data.mnemonic;
  } catch (err) {
    console.error('Error in getUserMnemonic:', err);
    return null;
  }
};

// Function to store a user's mnemonic
export const storeUserMnemonic = async (userId: string, mnemonic: string): Promise<boolean> => {
  if (!userId || !mnemonic) {
    console.error('Cannot store mnemonic: Missing user ID or mnemonic');
    return false;
  }

  try {
    const { data, error } = await supabase.functions.invoke('store-user-mnemonic', {
      body: { 
        user_id_param: userId,
        mnemonic_param: mnemonic
      }
    });
    
    if (error) {
      console.error('Error storing mnemonic:', error);
      return false;
    }
    
    if (!data || !data.success) {
      console.error('Failed to store mnemonic:', data?.error || 'Unknown error');
      return false;
    }
    
    return true;
  } catch (err) {
    console.error('Error in storeUserMnemonic:', err);
    return false;
  }
};
